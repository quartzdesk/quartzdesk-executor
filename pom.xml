<?xml version="1.0"?>

<!--
  ~ Copyright (c) 2015-2024 QuartzDesk.com.
  ~ Licensed under the MIT license (https://opensource.org/licenses/MIT).
  -->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

  <modelVersion>4.0.0</modelVersion>
  <groupId>com.quartzdesk-executor</groupId>
  <artifactId>quartzdesk-executor-pom</artifactId>
  <packaging>pom</packaging>
  <version>5.0.2</version>

  <properties>
    <module.name>com.quartzdesk.executor</module.name>

    <com.quartzdesk.version>5.0.2</com.quartzdesk.version>

    <!--
      Implementation-Vendor-Id used in manifests.
    -->
    <vendor.id>com.quartzdesk</vendor.id>

    <!--
      To prevent "[WARNING] Using platform encoding (Cp1252 actually) to copy filtered resources,
      i.e. build is platform dependent!" messages in the build log and also to make the changes
      plugin send release announcements in UTF-8.
    -->
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

    <!--
      Most recent version that still supports Java 8.
    -->
    <ch.qos.logback.version>1.3.14</ch.qos.logback.version>

    <!--
      servlet-api 3.1 (JavaEE 7)
      jsp-api 2.3 (JavaEE 7)

        GlassFish >= 4.0 (https://en.wikipedia.org/wiki/GlassFish)
        JBoss     >= 7.0 (https://access.redhat.com/articles/113373)
        Tomcat    >= 8.5 (https://tomcat.apache.org/whichversion.html)
        WebLogic  >= 12.2.1 (https://en.wikipedia.org/wiki/Oracle_WebLogic_Server#Standards_support_by_version)
        WebSphere >= 9.0 and Liberty Profile >= 8.5 (https://en.wikipedia.org/wiki/IBM_WebSphere_Application_Server#Version_history)
        WildFly   >= 8.0.0 (https://docs.wildfly.org/)
    -->
    <javax.servlet-api.version>3.1.0</javax.servlet-api.version>
    <javax.servlet.jsp-api.version>2.3.3</javax.servlet.jsp-api.version>

    <javax.servlet.jsp.jstl-api.version>1.2.2</javax.servlet.jsp.jstl-api.version>
    <javax.servlet.jsp.jstl-impl.version>1.2.5</javax.servlet.jsp.jstl-impl.version>

    <java.xml.bind.version>2.3.3</java.xml.bind.version>

    <!--
      Most recent version that still supports Java 8.
    -->
    <org.hibernate.version>5.6.15.Final</org.hibernate.version>

    <org.javassist.version>3.30.2-GA</org.javassist.version>

    <!--
      Most recent version that still supports Java 8 and old javax.* packages.
    -->
    <org.quartz-scheduler.quartz.version>2.4.0-rc2</org.quartz-scheduler.quartz.version>

    <!--
      Most recent version that still supports Java 8.
    -->
    <org.slf4j.version>2.0.13</org.slf4j.version>

    <!--
      Most recent version that still supports Java 8.
    -->
    <org.springframework.version>5.3.36</org.springframework.version>
  </properties>

  <name>QuartzDesk Executor</name>

  <description>QuartzDesk Executor (QE) is a scalable and generic job scheduling application that can be used to schedule execution of native shell scripts (*.sh, *.bat, *.cmd, ...), executable files (*.exe, ...), SQL commands, HTTP POST requests etc. QE can be, for example, used as a replacement of traditional Unix/Linux Cron-based scheduling systems.</description>

  <inceptionYear>2015</inceptionYear>

  <organization>
    <name>QuartzDesk.com</name>
    <url>https://quartzdesk.com</url>
  </organization>

  <licenses>
    <license>
      <name>MIT License</name>
      <url>https://github.com/quartzdesk/quartzdesk-executor/blob/master/LICENSE</url>
    </license>
  </licenses>

  <scm>
    <developerConnection>scm:svn:svn://scm.quartzdesk.com/quartzdesk/quartzdesk-executor/trunk</developerConnection>
    <connection>scm:svn:svn://scm.quartzdesk.com/quartzdesk/quartzdesk-executor/trunk</connection>
    <url>https://github.com/quartzdesk/quartzdesk-executor</url>
  </scm>

  <modules>
    <module>quartzdesk-executor-common</module>
    <module>quartzdesk-executor-dao</module>
    <module>quartzdesk-executor-domain</module>
    <module>quartzdesk-executor-core</module>
    <module>quartzdesk-executor-web</module>
  </modules>

  <dependencyManagement>
    <dependencies>

      <!-- QuartzDesk.com dependencies -->

      <!--
        QuartzDesk JVM Agent dependency is required for debugging the agent with the
        QuartzDesk Executor application.
      -->
      <dependency>
        <groupId>com.quartzdesk</groupId>
        <artifactId>quartzdesk-agent</artifactId>
        <version>${com.quartzdesk.version}</version>
      </dependency>


      <!--
        Library quartzdesk-api MUST be on the application runtime classpath in case
        the application is started in a JVM with the QuartzDesk JVM Agent. This library
        allows for relaying Quartz scheduler/job/trigger events and logging events
        to the QuartzDesk JVM Agent.
      -->
      <dependency>
        <groupId>com.quartzdesk</groupId>
        <artifactId>quartzdesk-api</artifactId>
        <version>${com.quartzdesk.version}</version>
      </dependency>


      <!-- 3rd party dependencies -->

      <dependency>
        <groupId>ch.qos.logback</groupId>
        <artifactId>logback-classic</artifactId>
        <version>${ch.qos.logback.version}</version>
      </dependency>


      <dependency>
        <groupId>ch.qos.logback</groupId>
        <artifactId>logback-core</artifactId>
        <version>${ch.qos.logback.version}</version>
      </dependency>


      <!--
        Required compile-time dependency of quartzdesk-executor-core (SshRemoteCommandExecutorJob) to execute
        commands over SSH.
      -->
      <dependency>
        <groupId>com.jcraft</groupId>
        <artifactId>jsch</artifactId>
        <version>0.1.55</version>
      </dependency>


      <!--
        Required compile-time dependency of quartzdesk-executor-core (SqlQueryExecutorJob) to save
        SQL result sets in CSV format.
      -->
      <dependency>
        <groupId>com.opencsv</groupId>
        <artifactId>opencsv</artifactId>
        <version>5.7.0</version>

        <exclusions>
          <!--
            Excluded to remove transitive commons-logging dependency. commons-beanutils dependency
            is added as a separate runtime dependency.
          -->
          <exclusion>
            <groupId>commons-beanutils</groupId>
            <artifactId>commons-beanutils</artifactId>
          </exclusion>

          <!--
            Excluded to remove transitive commons-lang3 dependency. commons-text dependency
            is added as a separate runtime dependency.
          -->
          <exclusion>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-text</artifactId>
          </exclusion>
        </exclusions>
      </dependency>


      <!--
        Required runtime dependency of opencsv. Added explicitly to remove commons-logging dependency.
      -->
      <dependency>
        <groupId>commons-beanutils</groupId>
        <artifactId>commons-beanutils</artifactId>
        <version>1.9.4</version>

        <exclusions>
          <!-- Commons-logging API provided by the SLF4j jcl-over-slf4j bridge -->
          <exclusion>
            <groupId>commons-logging</groupId>
            <artifactId>commons-logging</artifactId>
          </exclusion>
        </exclusions>
      </dependency>


<!--      <dependency>-->
<!--        <groupId>org.apache.commons</groupId>-->
<!--        <artifactId>commons-collections</artifactId>-->
<!--        <version>4.4</version>-->
<!--      </dependency>-->


      <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>javax.servlet-api</artifactId>
        <version>${javax.servlet-api.version}</version>
      </dependency>


      <dependency>
        <groupId>javax.servlet.jsp</groupId>
        <artifactId>javax.servlet.jsp-api</artifactId>
        <version>${javax.servlet.jsp-api.version}</version>
      </dependency>


      <dependency>
        <groupId>javax.servlet.jsp.jstl</groupId>
        <artifactId>javax.servlet.jsp.jstl-api</artifactId>
        <version>${javax.servlet.jsp.jstl-api.version}</version>
      </dependency>


      <dependency>
        <groupId>javaee</groupId>
        <artifactId>javaee-api</artifactId>
        <version>5</version>
      </dependency>


      <!-- Used by commons-text -->
      <dependency>
        <groupId>org.apache.commons</groupId>
        <artifactId>commons-lang3</artifactId>
        <version>3.14.0</version>
      </dependency>


      <!--
        Runtime dependency of opencsv library. Added manually to resolve commons-lang3 version collision.
      -->
      <dependency>
        <groupId>org.apache.commons</groupId>
        <artifactId>commons-text</artifactId>
        <version>1.12.0</version>
      </dependency>


      <!--
        Compile-time dependency of quartzdesk-executor-core.
      -->
      <dependency>
        <groupId>org.apache.httpcomponents</groupId>
        <artifactId>httpclient</artifactId>
        <version>4.5.14</version>

        <exclusions>
          <!-- Commons-logging API provided by the SLF4j jcl-over-slf4j bridge -->
          <exclusion>
            <groupId>commons-logging</groupId>
            <artifactId>commons-logging</artifactId>
          </exclusion>
        </exclusions>
      </dependency>


      <dependency>
        <groupId>org.glassfish.web</groupId>
        <artifactId>javax.servlet.jsp.jstl</artifactId>
        <version>${javax.servlet.jsp.jstl-impl.version}</version>

        <exclusions>
          <!--
            Excluded the transitive JSTL 1.2.0 API, because we use the JSTL 1.2.1 API.
            See the javax.servlet.jsp.jstl#javax.servlet.jsp.jstl-api dependency above.
          -->
          <exclusion>
            <groupId>javax.servlet.jsp.jstl</groupId>
            <artifactId>jstl-api</artifactId>
          </exclusion>
        </exclusions>
      </dependency>


      <dependency>
        <groupId>org.glassfish.jaxb</groupId>
        <artifactId>jaxb-runtime</artifactId>
        <version>${java.xml.bind.version}</version>
      </dependency>



      <dependency>
        <groupId>org.hibernate</groupId>
        <artifactId>hibernate-core</artifactId>
        <version>${org.hibernate.version}</version>

        <exclusions>

          <!--
            Java activation API already provided by org.hibernate:hibernate-core.
          -->
          <exclusion>
            <groupId>jakarta.activation</groupId>
            <artifactId>jakarta.activation-api</artifactId>
          </exclusion>

          <!--
            A newer version of Java XML Binding API already provided by project as a runtime dependency.
          -->
          <exclusion>
            <groupId>javax.xml.bind</groupId>
            <artifactId>jaxb-api</artifactId>
          </exclusion>

          <!--
            A newer version of Java XML Binding Runtime already provided by project as a runtime dependency.
          -->
          <exclusion>
            <groupId>org.glassfish.jaxb</groupId>
            <artifactId>jaxb-runtime</artifactId>
          </exclusion>

          <!--
            Excluded XML APIs because these APIs are already provided by JDK 1.6 and higher.
          -->
          <exclusion>
            <groupId>xml-apis</groupId>
            <artifactId>xml-apis</artifactId>
          </exclusion>
        </exclusions>
      </dependency>


      <dependency>
        <groupId>org.javassist</groupId>
        <artifactId>javassist</artifactId>
        <version>${org.javassist.version}</version>
      </dependency>


      <!--
        Required by Hibernate. Explicitly listed to avoid the conflict between hibernate-core and
        hibernate-commons-annotations that refer to distinct jboss-logging versions.
      -->
      <dependency>
        <groupId>org.jboss.logging</groupId>
        <artifactId>jboss-logging</artifactId>
        <version>3.4.3.Final</version>
      </dependency>


      <!--
        JAXB2 Basics Runtime APIs used in JAXB2 artifacts generated by XJC with the following plugins:
          -Xequals
          -XhashCode
          -Xmerge
          -XtoString
          -Xcopyable
      -->
      <dependency>
        <groupId>org.jvnet.jaxb2_commons</groupId>
        <artifactId>jaxb2-basics-runtime</artifactId>
        <version>1.11.1</version>
      </dependency>


      <dependency>
        <groupId>org.quartz-scheduler</groupId>
        <artifactId>quartz</artifactId>
        <version>${org.quartz-scheduler.quartz.version}</version>

        <exclusions>
          <exclusion>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
          </exclusion>
        </exclusions>
      </dependency>


      <dependency>
        <groupId>org.slf4j</groupId>
        <artifactId>slf4j-api</artifactId>
        <version>${org.slf4j.version}</version>
      </dependency>


      <dependency>
        <groupId>org.slf4j</groupId>
        <artifactId>log4j-over-slf4j</artifactId>
        <version>${org.slf4j.version}</version>
      </dependency>


      <dependency>
        <groupId>org.slf4j</groupId>
        <artifactId>jcl-over-slf4j</artifactId>
        <version>${org.slf4j.version}</version>
      </dependency>


      <dependency>
        <groupId>org.slf4j</groupId>
        <artifactId>jul-to-slf4j</artifactId>
        <version>${org.slf4j.version}</version>
      </dependency>


      <dependency>
        <groupId>org.slf4j</groupId>
        <artifactId>slf4j-log4j12</artifactId>
        <version>${org.slf4j.version}</version>
      </dependency>


      <!--
        Core utilities used by other modules.
        Define this if you use Spring Utility APIs (org.springframework.core.*/org.springframework.util.*)
      -->
      <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-core</artifactId>
        <version>${org.springframework.version}</version>

        <exclusions>
          <!-- Commons-logging API provided by the SLF4j jcl-over-slf4j bridge -->
          <exclusion>
            <groupId>commons-logging</groupId>
            <artifactId>commons-logging</artifactId>
          </exclusion>
        </exclusions>
      </dependency>


      <!--
        Expression Language (depends on spring-core)
        Define this if you use Spring Expression APIs (org.springframework.expression.*)
      -->
      <!--
      <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-expression</artifactId>
        <version>${org.springframework.version}</version>
      </dependency>
      -->


      <!--
        Bean Factory and JavaBeans utilities (depends on spring-core)
        Define this if you use Spring Bean APIs (org.springframework.beans.*)
      -->
      <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-beans</artifactId>
        <version>${org.springframework.version}</version>
      </dependency>


      <!--
        Aspect Oriented Programming (AOP) Framework (depends on spring-core, spring-beans)
        Define this if you use Spring AOP APIs (org.springframework.aop.*)
      -->
      <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-aop</artifactId>
        <version>${org.springframework.version}</version>
      </dependency>


      <!--
        Application Context (depends on spring-core, spring-expression, spring-aop, spring-beans)
        This is the central artifact for Spring's Dependency Injection Container and is generally always defined
      -->
      <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-context</artifactId>
        <version>${org.springframework.version}</version>
      </dependency>


      <!--
        Various Application Context utilities, including EhCache, JavaMail, Quartz, and Freemarker integration
        Define this if you need any of these integrations
      -->
      <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-context-support</artifactId>
        <version>${org.springframework.version}</version>
      </dependency>


      <!--
        JDBC Data Access Library (depends on core, beans, context, transaction)
        Define this if you use Spring's JdbcTemplate API (org.springframework.jdbc.*)
      -->
      <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-jdbc</artifactId>
        <version>${org.springframework.version}</version>
      </dependency>


      <!--
        Object-to-Relation-Mapping (ORM) integration with Hibernate, JPA, and iBatis.
        (depends on spring-core, spring-beans, spring-context, spring-tx)
        Define this if you need ORM (org.springframework.orm.*)
      -->
      <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-orm</artifactId>
        <version>${org.springframework.version}</version>
      </dependency>


      <!--
        Object-to-XML Mapping (OXM) abstraction and integration with JAXB, JiBX, Castor, XStream, and XML Beans.
        (depends on spring-core, spring-beans, spring-context)
        Define this if you need OXM (org.springframework.oxm.*)
      -->
      <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-oxm</artifactId>
        <version>${org.springframework.version}</version>
      </dependency>


      <!--
        Transaction Management Abstraction (depends on spring-core, spring-beans, spring-aop, spring-context)
        Define this if you use Spring Transactions or DAO Exception Hierarchy
        (org.springframework.transaction.*/org.springframework.dao.*)
      -->
      <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-tx</artifactId>
        <version>${org.springframework.version}</version>
      </dependency>


      <!--
        Web application development utilities applicable to both Servlet and Portlet Environments
        (depends on spring-core, spring-beans, spring-context)
        Define this if you use Spring MVC, or wish to use Struts, JSF, or another web framework with Spring (org.springframework.web.*)
      -->
      <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-web</artifactId>
        <version>${org.springframework.version}</version>
      </dependency>


      <!--
        Spring MVC for Servlet Environments (depends on spring-core, spring-beans, spring-context, spring-web)
        Define this if you use Spring MVC with a Servlet Container such as Apache Tomcat (org.springframework.web.servlet.*)
      -->
      <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-webmvc</artifactId>
        <version>${org.springframework.version}</version>
      </dependency>


      <!--
        Support for testing Spring applications with tools such as JUnit and TestNG
        This artifact is generally always defined with a 'test' scope for the integration testing framework and unit testing stubs
      -->
      <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-test</artifactId>
        <version>${org.springframework.version}</version>
      </dependency>


      <!--
        Most recent version that still supports Java 8.
      -->
      <dependency>
        <groupId>org.testng</groupId>
        <artifactId>testng</artifactId>
        <version>7.5.1</version>
      </dependency>

    </dependencies>
  </dependencyManagement>


  <build>
   <pluginManagement>
      <plugins>

        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.13.0</version>
          <configuration>
            <source>1.8</source>
            <target>1.8</target>
            <!-- Include debugging information in generated bytecode. -->
            <debug>true</debug>
            <encoding>UTF-8</encoding>
            <showDeprecation>true</showDeprecation>
            <showWarnings>true</showWarnings>
            <compilerArgs>
              <arg>-Xlint:unchecked</arg>
            </compilerArgs>
          </configuration>
        </plugin>


        <plugin>
          <artifactId>maven-enforcer-plugin</artifactId>
          <version>3.5.0</version>

          <dependencies>
            <!--
              Extra enforcer rules not provided by Maven Enforcer Plugin out of the box.
              For example, enforceBytecodeVersion rule.
            -->
            <dependency>
              <groupId>org.codehaus.mojo</groupId>
              <artifactId>extra-enforcer-rules</artifactId>
              <version>1.8.0</version>
            </dependency>
          </dependencies>
        </plugin>


        <plugin>
          <artifactId>maven-jar-plugin</artifactId>
          <version>3.4.1</version>
          <configuration>
            <archive>
              <!--
                Generates the META-INF/INDEX.LIST resource containing the list of all packages contained in the
                JAR archive. This resource is required by Stripes action resolution framework to discover all
                ActionBeans in a deployed WAR/EAR under IBM WebSphere. Without this setting, ActionBeans located
                outside WEB-INF/classes may not be found.
              -->
              <index>true</index>
              <manifest>
                <addDefaultImplementationEntries>false</addDefaultImplementationEntries>
              </manifest>
              <manifestEntries>
                <Automatic-Module-Name>${module.name}</Automatic-Module-Name>
                <Implementation-Title>${project.name}</Implementation-Title>
                <Implementation-Version>${project.version}</Implementation-Version>
                <Implementation-Vendor-Id>${vendor.id}</Implementation-Vendor-Id>
                <Implementation-Vendor>${project.organization.name}</Implementation-Vendor>
                <Implementation-Vendor-URL>${project.organization.url}</Implementation-Vendor-URL>
                <!--suppress UnresolvedMavenProperty -->
                <Build-Number>${build.number}</Build-Number>
              </manifestEntries>
            </archive>
          </configuration>
        </plugin>


        <plugin>
          <artifactId>maven-javadoc-plugin</artifactId>
          <version>3.7.0</version>
          <configuration>
            <doclint>none</doclint>
            <quiet>true</quiet>
          </configuration>
        </plugin>


        <plugin>
          <artifactId>maven-release-plugin</artifactId>
          <version>3.0.1</version>
        </plugin>


        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.3.1</version>
        </plugin>


        <plugin>
          <artifactId>maven-source-plugin</artifactId>
          <version>3.3.1</version>
        </plugin>


        <plugin>
          <artifactId>maven-toolchains-plugin</artifactId>
          <version>3.2.0</version>
        </plugin>


        <plugin>
          <groupId>de.smartics.maven.plugin</groupId>
          <artifactId>buildmetadata-maven-plugin</artifactId>
          <version>1.7.0</version>
          <configuration>
            <!--
            <hideCommandLineInfo>false</hideCommandLineInfo>
            <logLevel>FINEST</logLevel>
            -->
            <addScmInfo>false</addScmInfo>
            <buildDatePattern>yyyy-MM-dd</buildDatePattern>
            <forceNewProperties>true</forceNewProperties>
            <properties>
              <!-- build.number is set in the parent POM -->
              <property>
                <name>build.number</name>
                <section>build</section>
              </property>
              <property>
                <name>project.name</name>
                <section>project</section>
              </property>
              <property>
                <name>project.version</name>
                <section>project</section>
              </property>
              <property>
                <name>vendor.id</name>
                <section>project</section>
              </property>
              <property>
                <name>project.organization.name</name>
                <section>project</section>
              </property>
              <property>
                <name>project.organization.url</name>
                <section>project</section>
              </property>
            </properties>
          </configuration>
        </plugin>


        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>build-helper-maven-plugin</artifactId>
          <version>3.6.0</version>
        </plugin>


        <plugin>
          <groupId>org.jvnet.jaxb2.maven2</groupId>
           <artifactId>maven-jaxb2-plugin</artifactId>
           <version>0.15.1</version>

          <dependencies>
            <!--
              Required JAXB2 plugin to generate getters for boolean properties.
              JAXB2 implementation shipped with JDK1.6 that is used to compile the
              project generates only "is" getter and it makes the boolean property
              invisible to various frameworks used in the projects (e.g. Jackson,
              JSTL etc.).
            -->
            <dependency>
              <groupId>com.nebulent.xjc</groupId>
              <artifactId>boolean-getter</artifactId>
              <version>0.5</version>
            </dependency>

            <!-- Contains JAXB2 basics -Xfluent-api plugin -->
            <dependency>
              <groupId>org.jvnet.jaxb2_commons</groupId>
              <artifactId>jaxb2-fluent-api</artifactId>
              <version>3.0</version>
            </dependency>

            <!--
              Contains various JAXB2 basics plugins. For example:
                -Xsetters
                -Xequals
                -XhashCode
                -Xmerge
                -XtoString
                -Xcopyable
                ...
            -->
            <dependency>
              <groupId>org.jvnet.jaxb2_commons</groupId>
              <artifactId>jaxb2-basics</artifactId>
              <version>1.11.1</version>
            </dependency>

            <!--
              Required by *some* of the JAXB2 basics plugins. For example:
                -Xequals
                -XhashCode
                -Xmerge
                -XtoString
                -Xcopyable
            -->
            <dependency>
              <groupId>org.jvnet.jaxb2_commons</groupId>
              <artifactId>jaxb2-basics-runtime</artifactId>
              <version>1.11.1</version>
            </dependency>
          </dependencies>
        </plugin>

      </plugins>
    </pluginManagement>


    <plugins>

			<plugin>
        <artifactId>maven-enforcer-plugin</artifactId>
        <executions>
          <execution>
            <id>enforce-versions</id>
            <phase>validate</phase>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                <requireMavenVersion>
                  <version>3.2.5</version>
                </requireMavenVersion>
                <requireJavaVersion>
                  <version>1.8</version>
                </requireJavaVersion>
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>


      <plugin>
        <artifactId>maven-toolchains-plugin</artifactId>
        <executions>
          <execution>
            <goals>
              <goal>toolchain</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <toolchains>
            <jdk>
              <!-- Project will be compiled with Sun JDK version 8 defined in ~/.m2/toolchains.xml -->
              <version>8</version>
              <vendor>sun</vendor>
            </jdk>
          </toolchains>
        </configuration>
      </plugin>

    </plugins>
  </build>

</project>
